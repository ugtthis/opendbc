#!/usr/bin/env python3
"""
Car Data JSON Analyzer

This script analyzes car data from JSON files generated by create_cars_json.py.
It provides statistics and insights about the cars in the dataset, including:
- Distribution by make, model, and support type
- Cars requiring angled mounts
- Harness usage statistics
- Feature support statistics (longitudinal control, auto resume)
- Year range distribution
- Brand distribution

Usage:
  python3 analyze_car_data.py                    # Analyze all cars
  python3 analyze_car_data.py --make Toyota      # Filter by make
  python3 analyze_car_data.py --model Camry      # Filter by model
  python3 analyze_car_data.py --file custom.json # Use custom JSON file

Maintainer Notes:
- This script depends on the JSON structure from create_cars_json.py
- Filters are case-sensitive for make but case-insensitive for model
- The script handles missing fields gracefully with .get() method
"""
import json
import os
import argparse
from collections import Counter, defaultdict

def analyze_car_data(json_file="all_cars.json", make_filter=None, model_filter=None):
    """
    Analyze car data from the JSON file and print various statistics.
    
    Args:
        json_file (str): Path to the JSON file containing car data
        make_filter (str): Filter results to a specific make (e.g., 'Toyota')
        model_filter (str): Filter results to a specific model (e.g., 'Camry')
    """
    # Load the JSON data
    with open(json_file, 'r') as f:
        cars = json.load(f)
    
    # Apply filters if specified
    if make_filter:
        cars = [car for car in cars if car['make'] == make_filter]
    if model_filter:
        cars = [car for car in cars if model_filter.lower() in car['model'].lower()]
    
    if make_filter or model_filter:
        filter_desc = []
        if make_filter:
            filter_desc.append(f"make='{make_filter}'")
        if model_filter:
            filter_desc.append(f"model contains '{model_filter}'")
        print(f"Loaded {len(cars)} cars from {json_file} with filters: {', '.join(filter_desc)}")
    else:
        print(f"Loaded {len(cars)} cars from {json_file}")
    
    if not cars:
        print("No cars found matching the specified filters.")
        return
    
    print("-" * 50)
    
    # Count cars by make
    makes = Counter([car['make'] for car in cars])
    print("\nTop car makes by count:")
    for make, count in makes.most_common():
        print(f"- {make}: {count} models")
    
    # Count cars by support type
    support_types = Counter([car['support_type'] for car in cars if car['support_type']])
    print("\nCars by support type:")
    for support_type, count in support_types.most_common():
        print(f"- {support_type}: {count} cars")
    
    # Analyze angled mounts
    angled_mount_cars = [car for car in cars if car.get('has_angled_mount', False)]
    print(f"\nCars requiring angled mounts: {len(angled_mount_cars)} ({len(angled_mount_cars)/len(cars):.1%})")
    
    # Group angled mount cars by make
    if angled_mount_cars:
        angled_by_make = defaultdict(list)
        for car in angled_mount_cars:
            angled_by_make[car['make']].append(car['model'])
        
        print("\nMakes requiring angled mounts:")
        for make, models in sorted(angled_by_make.items()):
            unique_models = set(models)
            print(f"- {make}: {len(unique_models)} unique models ({', '.join(unique_models)})")
    
    # Analyze harnesses
    harnesses = Counter([car['harness'] for car in cars if car['harness']])
    print("\nHarnesses by usage:")
    for harness, count in harnesses.most_common():
        print(f"- {harness}: {count} cars ({count/len(cars):.1%})")
    
    # Find cars with longitudinal control
    longitudinal_cars = [car for car in cars if car.get('openpilot_longitudinal_control')]
    print(f"\nCars with openpilot longitudinal control: {len(longitudinal_cars)} ({len(longitudinal_cars)/len(cars):.1%})")
    
    # Find cars with auto resume
    auto_resume_cars = [car for car in cars if car.get('auto_resume')]
    print(f"Cars with auto resume: {len(auto_resume_cars)} ({len(auto_resume_cars)/len(cars):.1%})")
    
    # Find cars by year range
    year_ranges = Counter()
    for car in cars:
        if car.get('years'):
            year_ranges[car['years']] += 1
    
    print("\nMost common year ranges:")
    for year_range, count in year_ranges.most_common(10):
        print(f"- {year_range}: {count} cars")
    
    # Find cars by brand
    brands = Counter([car['brand'] for car in cars if car.get('brand')])
    print("\nCars by brand:")
    for brand, count in brands.most_common():
        print(f"- {brand}: {count} cars ({count/len(cars):.1%})")


def main():
    """
    Main function to parse arguments and run the analysis.
    """
    parser = argparse.ArgumentParser(description='Analyze car data from JSON file')
    parser.add_argument('--file', type=str, default="all_cars.json",
                        help='Path to the JSON file (default: all_cars.json)')
    parser.add_argument('--make', type=str, help='Filter by car make (e.g., Toyota)')
    parser.add_argument('--model', type=str, help='Filter by car model (partial match, e.g., Camry)')
    args = parser.parse_args()
    
    analyze_car_data(args.file, args.make, args.model)
    
    print("\nThis script demonstrates how to analyze the car data JSON.")
    print("You can modify it to extract other information or filter cars based on specific criteria.")
    print("Use --make and --model arguments to filter the data.")


if __name__ == "__main__":
    main() 